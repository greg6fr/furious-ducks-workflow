---
- name: Install base packages and Docker
  hosts: all
  become: yes
  tasks:
    - name: Clean up conflicting Docker repositories
      shell: |
        rm -f /etc/apt/sources.list.d/docker.list
        rm -f /etc/apt/sources.list.d/docker.list.save
        rm -f /usr/share/keyrings/docker-archive-keyring.gpg
        rm -f /etc/apt/keyrings/docker.gpg
        apt-get clean
        apt-get update
      ignore_errors: yes

    - name: Update and install common tools
      apt:
        update_cache: yes
        name:
          - curl
          - git
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
        state: present

    - name: Add NodeSource GPG key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present
      tags:
        - nodejs
        - node-setup

    - name: Add NodeSource repository
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_18.x {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes
      tags:
        - nodejs
        - node-setup

    - name: Install Node.js and npm
      apt:
        name:
          - nodejs
        state: present
        update_cache: yes
      tags:
        - nodejs
        - node-setup

    - name: Verify Node.js installation
      shell: |
        node --version
        npm --version
      register: nodejs_version
      ignore_errors: yes
      tags:
        - nodejs
        - node-setup

    - name: Display Node.js version
      debug:
        msg: "Node.js installed: {{ nodejs_version.stdout_lines }}"
      when: nodejs_version.stdout_lines is defined
      tags:
        - nodejs
        - node-setup

    - name: Remove conflicting Docker sources
      file:
        path: /etc/apt/sources.list.d/docker.list
        state: absent
      ignore_errors: yes

    - name: Clean apt cache
      apt:
        update_cache: yes
        cache_valid_time: 0

    - name: Install Docker using convenience script method
      shell: |
        if ! command -v docker &> /dev/null; then
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh
          rm get-docker.sh
        fi
      args:
        creates: /usr/bin/docker

    - name: Install Docker Compose plugin
      apt:
        name: docker-compose-plugin
        state: present
        update_cache: yes
      ignore_errors: yes

    - name: Enable Docker
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Add admin user to docker group
      user:
        name: admin
        groups: docker
        append: yes

- name: Initialize Docker Swarm on CI/CD
  hosts: ci_cd_server
  become: yes
  tasks:
    - name: Copy docker-swarm-init.sh script to CI/CD server
      copy:
        src: ../docker-swarm-init.sh
        dest: /tmp/docker-swarm-init.sh
        mode: '0755'
        owner: root
        group: root

    - name: Execute docker-swarm-init.sh script
      shell: /tmp/docker-swarm-init.sh
      register: swarm_init_result
      ignore_errors: yes

    - name: Display Swarm initialization result
      debug:
        var: swarm_init_result.stdout_lines

    - name: Get Swarm join token
      shell: docker swarm join-token -q worker
      register: swarm_token

    - name: Save join token for other hosts
      set_fact:
        worker_token: "{{ swarm_token.stdout }}"

- name: Join other servers to Docker Swarm
  hosts: dev_server, qa_server, prod_server
  become: yes
  tags:
    - swarm-join
    - docker-swarm
  tasks:
    - name: Get Swarm join token from manager
      shell: docker swarm join-token -q worker
      register: swarm_token
      delegate_to: "{{ groups['ci_cd_server'][0] }}"
      run_once: true

    - name: Get manager private IP address
      set_fact:
        manager_private_ip: "{{ hostvars[groups['ci_cd_server'][0]]['ansible_default_ipv4']['address'] }}"
      run_once: true

    - name: Copy join-swarm script to worker nodes
      copy:
        src: scripts/join-swarm.sh
        dest: /tmp/join-swarm.sh
        mode: '0755'

    - name: Determine node type based on inventory group
      set_fact:
        node_type: |
          {% if inventory_hostname in groups['dev_server'] %}
          dev
          {% elif inventory_hostname in groups['qa_server'] %}
          qa
          {% elif inventory_hostname in groups['prod_server'] %}
          prod
          {% else %}
          worker
          {% endif %}

    - name: Execute join-swarm script on worker nodes
      shell: /tmp/join-swarm.sh "{{ swarm_token.stdout }}" "{{ manager_private_ip }}" "{{ node_type | trim }}"
      register: join_result
      ignore_errors: yes

    - name: Display join result for each worker
      debug:
        msg: "{{ inventory_hostname }}: {{ join_result.stdout_lines }}"
      when: join_result is defined

    - name: Verify swarm membership from manager
      shell: docker node ls
      register: node_list
      delegate_to: "{{ groups['ci_cd_server'][0] }}"
      run_once: true

    - name: Display current swarm nodes
      debug:
        var: node_list.stdout_lines
      when: node_list is defined and node_list.stdout_lines is defined
      run_once: true

- name: Setup Jenkins and GitLab on CI/CD
  hosts: ci_cd_server
  become: yes
  tasks:
    - name: Check system resources before deployment
      shell: |
        echo "Memory usage:"
        free -h
        echo "Disk usage:"
        df -h /
        echo "System load:"
        uptime
      register: system_resources

    - name: Display system resources
      debug:
        var: system_resources.stdout_lines

    - name: Install Python Docker SDK
      apt:
        name: python3-docker
        state: present

    - name: Create Jenkins home directory with correct permissions
      file:
        path: /var/jenkins_home
        state: directory
        owner: 1000
        group: 1000
        mode: '0755'

    - name: Pull Jenkins image
      community.docker.docker_image:
        name: jenkins/jenkins
        tag: lts
        source: pull

    - name: Run Jenkins container
      community.docker.docker_container:
        name: jenkins
        image: jenkins/jenkins:lts
        state: started
        restart_policy: always
        ports:
          - "8080:8080"
          - "50000:50000"
        volumes:
          - /var/jenkins_home:/var/jenkins_home

    # Deploy Gitea (Lightweight Git service - much smaller than GitLab CE)
    - name: Pull Gitea image
      docker_image:
        name: gitea/gitea
        tag: latest
        source: pull

    - name: Create Gitea data directory
      file:
        path: /srv/gitea
        state: directory
        owner: 1000
        group: 1000
        mode: '0755'

    - name: Run Gitea container
      docker_container:
        name: gitea
        image: gitea/gitea:latest
        state: started
        restart_policy: always
        ports:
          - "3000:3000"
          - "2222:22"
        volumes:
          - /srv/gitea:/data
          - /etc/timezone:/etc/timezone:ro
          - /etc/localtime:/etc/localtime:ro
        env:
          USER_UID: "1000"
          USER_GID: "1000"