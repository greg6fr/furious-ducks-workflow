---
# Vérification de la présence des outils requis sur tous les serveurs
- name: Verify required tools on all servers
  hosts: all
  become: yes
  gather_facts: yes
  tasks:
    - name: Check if Docker is installed
      command: docker --version
      register: docker_check
      ignore_errors: yes
      changed_when: false

    - name: Check if Git is installed
      command: git --version
      register: git_check
      ignore_errors: yes
      changed_when: false

    - name: Check if Node.js is installed
      command: node --version
      register: nodejs_check
      ignore_errors: yes
      changed_when: false

    - name: Check if npm is installed
      command: npm --version
      register: npm_check
      ignore_errors: yes
      changed_when: false

    - name: Check if curl is installed
      command: curl --version
      register: curl_check
      ignore_errors: yes
      changed_when: false

    - name: Check if wget is installed
      command: wget --version
      register: wget_check
      ignore_errors: yes
      changed_when: false

    - name: Display tool verification results
      debug:
        msg: |
          Server: {{ inventory_hostname }}
          Docker: {{ 'INSTALLED' if docker_check.rc == 0 else 'NOT INSTALLED' }} {{ docker_check.stdout.split('\n')[0] if docker_check.rc == 0 else '' }}
          Git: {{ 'INSTALLED' if git_check.rc == 0 else 'NOT INSTALLED' }} {{ git_check.stdout.split('\n')[0] if git_check.rc == 0 else '' }}
          Node.js: {{ 'INSTALLED' if nodejs_check.rc == 0 else 'NOT INSTALLED' }} {{ nodejs_check.stdout if nodejs_check.rc == 0 else '' }}
          npm: {{ 'INSTALLED' if npm_check.rc == 0 else 'NOT INSTALLED' }} {{ npm_check.stdout if npm_check.rc == 0 else '' }}
          curl: {{ 'INSTALLED' if curl_check.rc == 0 else 'NOT INSTALLED' }} {{ curl_check.stdout.split('\n')[0] if curl_check.rc == 0 else '' }}
          wget: {{ 'INSTALLED' if wget_check.rc == 0 else 'NOT INSTALLED' }} {{ wget_check.stdout.split('\n')[0] if wget_check.rc == 0 else '' }}

    - name: Create summary of missing tools
      set_fact:
        missing_tools: |
          {% set missing = [] %}
          {% if docker_check.rc != 0 %}{{ missing.append('docker') }}{% endif %}
          {% if git_check.rc != 0 %}{{ missing.append('git') }}{% endif %}
          {% if nodejs_check.rc != 0 %}{{ missing.append('nodejs') }}{% endif %}
          {% if npm_check.rc != 0 %}{{ missing.append('npm') }}{% endif %}
          {% if curl_check.rc != 0 %}{{ missing.append('curl') }}{% endif %}
          {% if wget_check.rc != 0 %}{{ missing.append('wget') }}{% endif %}
          {{ missing | join(', ') }}

    - name: Display missing tools summary
      debug:
        msg: "{{ inventory_hostname }}: Missing tools: {{ missing_tools if missing_tools else 'None - All tools are installed!' }}"

# Vérification spécifique pour le serveur de développement
- name: Verify development-specific tools on dev server
  hosts: dev_server
  become: yes
  gather_facts: yes
  tasks:
    - name: Check if AWS CLI is installed
      command: aws --version
      register: aws_cli_check
      ignore_errors: yes
      changed_when: false

    - name: Check if Angular CLI is installed
      command: ng version
      register: angular_cli_check
      ignore_errors: yes
      changed_when: false
      become_user: "{{ ansible_user | default('ubuntu') }}"

    - name: Check if Angular CLI is installed globally via npm
      command: npm list -g @angular/cli
      register: angular_npm_check
      ignore_errors: yes
      changed_when: false

    - name: Display development tools verification results
      debug:
        msg: |
          Development Server: {{ inventory_hostname }}
          AWS CLI: {{ 'INSTALLED' if aws_cli_check.rc == 0 else 'NOT INSTALLED' }} {{ aws_cli_check.stdout.split('\n')[0] if aws_cli_check.rc == 0 else '' }}
          Angular CLI (ng): {{ 'INSTALLED' if angular_cli_check.rc == 0 else 'NOT INSTALLED' }}
          Angular CLI (npm): {{ 'INSTALLED' if angular_npm_check.rc == 0 else 'NOT INSTALLED' }}

    - name: Create summary of missing development tools
      set_fact:
        missing_dev_tools: |
          {% set missing = [] %}
          {% if aws_cli_check.rc != 0 %}{{ missing.append('aws-cli') }}{% endif %}
          {% if angular_cli_check.rc == 0 and angular_npm_check.rc != 0 %}{{ missing.append('angular-cli') }}{% endif %}
          {{ missing | join(', ') }}

    - name: Display missing development tools summary
      debug:
        msg: "{{ inventory_hostname }} (Dev Server): Missing development tools: {{ missing_dev_tools if missing_dev_tools else 'None - All development tools are installed!' }}"

- name: Install base packages and Docker
  hosts: all
  become: yes
  tasks:
    - name: Clean up conflicting Docker repositories
      shell: |
        rm -f /etc/apt/sources.list.d/docker.list
        rm -f /etc/apt/sources.list.d/docker.list.save
        rm -f /usr/share/keyrings/docker-archive-keyring.gpg
        rm -f /etc/apt/keyrings/docker.gpg
        apt-get clean
        apt-get update
      ignore_errors: yes

    - name: Update and install common tools
      apt:
        update_cache: yes
        name:
          - curl
          - wget
          - git
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
        state: present

    - name: Add NodeSource GPG key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present
      tags:
        - nodejs
        - node-setup

    - name: Add NodeSource repository
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_18.x {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes
      tags:
        - nodejs
        - node-setup

    - name: Install Node.js and npm
      apt:
        name:
          - nodejs
        state: present
        update_cache: yes
      tags:
        - nodejs
        - node-setup

    - name: Verify Node.js installation
      shell: |
        node --version
        npm --version
      register: nodejs_version
      ignore_errors: yes
      tags:
        - nodejs
        - node-setup

    - name: Display Node.js version
      debug:
        msg: "Node.js installed: {{ nodejs_version.stdout_lines }}"
      when: nodejs_version.stdout_lines is defined
      tags:
        - nodejs
        - node-setup

    - name: Remove conflicting Docker sources
      file:
        path: /etc/apt/sources.list.d/docker.list
        state: absent
      ignore_errors: yes

    - name: Clean apt cache
      apt:
        update_cache: yes
        cache_valid_time: 0

    - name: Install Docker using convenience script method
      shell: |
        if ! command -v docker &> /dev/null; then
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh
          rm get-docker.sh
        fi
      args:
        creates: /usr/bin/docker

    - name: Install Docker Compose plugin
      apt:
        name: docker-compose-plugin
        state: present
        update_cache: yes
      ignore_errors: yes

    - name: Enable Docker
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Add admin user to docker group
      user:
        name: admin
        groups: docker
        append: yes

# Installation des outils spécifiques au serveur de développement (après installation de npm)
- name: Install development-specific tools on dev server
  hosts: dev_server
  become: yes
  gather_facts: yes
  tasks:
    - name: Install AWS CLI dependencies
      apt:
        update_cache: yes
        name:
          - unzip
          - python3-pip
        state: present

    - name: Check if AWS CLI is already installed
      command: aws --version
      register: aws_cli_current_check
      ignore_errors: yes
      changed_when: false

    - name: Download AWS CLI v2
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: "/tmp/awscliv2.zip"
        mode: '0644'
      when: aws_cli_current_check.rc != 0

    - name: Extract AWS CLI v2
      unarchive:
        src: "/tmp/awscliv2.zip"
        dest: "/tmp"
        remote_src: yes
      when: aws_cli_current_check.rc != 0

    - name: Install AWS CLI v2
      command: /tmp/aws/install
      when: aws_cli_current_check.rc != 0
      ignore_errors: yes

    - name: Clean up AWS CLI installation files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/awscliv2.zip"
        - "/tmp/aws"
      when: aws_cli_current_check.rc != 0

    - name: Verify npm is available
      shell: |
        export PATH="/usr/bin:$PATH"
        which npm && npm --version
      register: npm_path_check
      ignore_errors: yes

    - name: Install Angular CLI globally via npm
      shell: |
        export PATH="/usr/bin:$PATH"
        npm install -g @angular/cli
      environment:
        PATH: "/usr/bin:{{ ansible_env.PATH }}"
      when: npm_path_check.rc == 0

    - name: Verify AWS CLI installation
      command: aws --version
      register: aws_cli_verify
      ignore_errors: yes
      changed_when: false

    - name: Verify Angular CLI installation
      shell: |
        export PATH="/usr/bin:$PATH"
        ng version
      environment:
        PATH: "/usr/bin:{{ ansible_env.PATH }}"
      register: angular_cli_verify
      ignore_errors: yes
      changed_when: false

    - name: Display installation verification results
      debug:
        msg: |
          Development tools installation verification:
          AWS CLI: {{ 'SUCCESS' if aws_cli_verify.rc == 0 else 'FAILED' }} {{ aws_cli_verify.stdout.split('\n')[0] if aws_cli_verify.rc == 0 else '' }}
          Angular CLI: {{ 'SUCCESS' if angular_cli_verify.rc == 0 else 'FAILED' }}

- name: Initialize Docker Swarm on CI/CD
  hosts: ci_cd_server
  become: yes
  tasks:
    - name: Copy docker-swarm-init.sh script to CI/CD server
      copy:
        src: ../docker-swarm-init.sh
        dest: /tmp/docker-swarm-init.sh
        mode: '0755'
        owner: root
        group: root

    - name: Execute docker-swarm-init.sh script
      shell: /tmp/docker-swarm-init.sh
      register: swarm_init_result
      ignore_errors: yes

    - name: Display Swarm initialization result
      debug:
        var: swarm_init_result.stdout_lines

    - name: Get Swarm join token
      shell: docker swarm join-token -q worker
      register: swarm_token

    - name: Save join token for other hosts
      set_fact:
        worker_token: "{{ swarm_token.stdout }}"

- name: Join other servers to Docker Swarm
  hosts: dev_server, qa_server, prod_server
  become: yes
  tags:
    - swarm-join
    - docker-swarm
  tasks:
    - name: Get Swarm join token from manager
      shell: docker swarm join-token -q worker
      register: swarm_token
      delegate_to: "{{ groups['ci_cd_server'][0] }}"
      run_once: true

    - name: Get manager private IP address
      set_fact:
        manager_private_ip: "{{ hostvars[groups['ci_cd_server'][0]]['ansible_default_ipv4']['address'] }}"
      run_once: true

    - name: Copy join-swarm script to worker nodes
      copy:
        src: scripts/join-swarm.sh
        dest: /tmp/join-swarm.sh
        mode: '0755'

    - name: Determine node type based on inventory group
      set_fact:
        node_type: |
          {% if inventory_hostname in groups['dev_server'] %}
          dev
          {% elif inventory_hostname in groups['qa_server'] %}
          qa
          {% elif inventory_hostname in groups['prod_server'] %}
          prod
          {% else %}
          worker
          {% endif %}

    - name: Execute join-swarm script on worker nodes
      shell: /tmp/join-swarm.sh "{{ swarm_token.stdout }}" "{{ manager_private_ip }}" "{{ node_type | trim }}"
      register: join_result
      ignore_errors: yes

    - name: Display join result for each worker
      debug:
        msg: "{{ inventory_hostname }}: {{ join_result.stdout_lines }}"
      when: join_result is defined

    - name: Verify swarm membership from manager
      shell: docker node ls
      register: node_list
      delegate_to: "{{ groups['ci_cd_server'][0] }}"
      run_once: true

    - name: Display current swarm nodes
      debug:
        var: node_list.stdout_lines
      when: node_list is defined and node_list.stdout_lines is defined
      run_once: true

- name: Setup Jenkins and GitLab on CI/CD
  hosts: ci_cd_server
  become: yes
  tasks:
    - name: Check system resources before deployment
      shell: |
        echo "Memory usage:"
        free -h
        echo "Disk usage:"
        df -h /
        echo "System load:"
        uptime
      register: system_resources

    - name: Display system resources
      debug:
        var: system_resources.stdout_lines

    - name: Install Python Docker SDK
      apt:
        name: python3-docker
        state: present

    - name: Create Jenkins home directory with correct permissions
      file:
        path: /var/jenkins_home
        state: directory
        owner: 1000
        group: 1000
        mode: '0755'

    - name: Pull Jenkins image with Docker support
      community.docker.docker_image:
        name: jenkins/jenkins
        tag: lts
        source: pull

    - name: Run Jenkins container with Docker access
      community.docker.docker_container:
        name: jenkins
        image: jenkins/jenkins:lts
        state: started
        restart_policy: always
        user: "root"  # Run as root to access Docker socket
        ports:
          - "8080:8080"
          - "50000:50000"
        volumes:
          - /var/jenkins_home:/var/jenkins_home
          - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket
        env:
          DOCKER_HOST: "unix:///var/run/docker.sock"
          JENKINS_OPTS: "--httpPort=8080"

    - name: Install Docker CLI, Git, Node.js, npm and AWS CLI in Jenkins container
      shell: |
        docker exec jenkins bash -c '
        apt-get update &&
        apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release git unzip &&
        curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg &&
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian bullseye stable" > /etc/apt/sources.list.d/docker.list &&
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash - &&
        apt-get update &&
        apt-get install -y docker-ce-cli nodejs &&
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" &&
        unzip awscliv2.zip &&
        ./aws/install &&
        rm -rf awscliv2.zip aws/ &&
        npm --version && node --version && git --version && aws --version
        ' || echo "Installation completed or already installed"
      ignore_errors: yes

    - name: Verify Docker access in Jenkins
      shell: docker exec jenkins docker --version
      register: jenkins_docker_version
      ignore_errors: yes

    - name: Verify Git, Node.js, npm and AWS CLI in Jenkins
      shell: |
        docker exec jenkins bash -c '
        echo "Git version: $(git --version)"
        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"
        echo "AWS CLI version: $(aws --version)"
        '
      register: jenkins_tools_version
      ignore_errors: yes

    - name: Display Jenkins tools status
      debug:
        msg: |
          Jenkins Docker CLI: {{ jenkins_docker_version.stdout if jenkins_docker_version.stdout is defined else 'Installation needed' }}
          Jenkins Tools: {{ jenkins_tools_version.stdout_lines if jenkins_tools_version.stdout_lines is defined else 'Installation needed' }}
      when: jenkins_docker_version is defined or jenkins_tools_version is defined

    # Deploy Gitea (Lightweight Git service - much smaller than GitLab CE)
    - name: Pull Gitea image
      docker_image:
        name: gitea/gitea
        tag: latest
        source: pull

    - name: Create Gitea data directory
      file:
        path: /srv/gitea
        state: directory
        owner: 1000
        group: 1000
        mode: '0755'

    - name: Run Gitea container
      docker_container:
        name: gitea
        image: gitea/gitea:latest
        state: started
        restart_policy: always
        ports:
          - "3000:3000"
          - "2222:22"
        volumes:
          - /srv/gitea:/data
          - /etc/timezone:/etc/timezone:ro
          - /etc/localtime:/etc/localtime:ro
        env:
          USER_UID: "1000"
          USER_GID: "1000"