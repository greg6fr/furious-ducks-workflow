events {
    worker_connections 1024;
}

http {
    upstream frontend-qa {
        server frontend-qa:80;
    }
    
    upstream backend-qa {
        server backend-qa:3000;
    }
    
    # Logging for QA debugging
    access_log /var/log/nginx/qa_access.log;
    error_log /var/log/nginx/qa_error.log debug;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    
    # Frontend server for QA
    server {
        listen 80;
        server_name _;
        
        # QA specific headers (less restrictive for testing)
        add_header X-Environment "qa";
        add_header X-Debug-Mode "enabled";
        
        location / {
            proxy_pass http://frontend-qa;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No caching in QA for testing
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
        
        # Test endpoints for QA
        location /test {
            proxy_pass http://frontend-qa/test;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "qa-healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Debug endpoint for QA
        location /debug {
            return 200 "QA Debug Info: $request_uri";
            add_header Content-Type text/plain;
        }
    }
    
    # Backend API server for QA
    server {
        listen 3000;
        server_name _;
        
        location / {
            proxy_pass http://backend-qa;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers (permissive for QA testing)
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Test-Header";
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
        
        # API health check
        location /health {
            access_log off;
            proxy_pass http://backend-qa/health;
        }
        
        # Test data endpoints for QA
        location /test-data {
            proxy_pass http://backend-qa/test-data;
        }
    }
}
